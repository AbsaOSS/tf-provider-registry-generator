// Code generated by MockGen. DO NOT EDIT.
// Source: internal/location/location.go

// Package location is a generated GoMock package.
package location

import (
	reflect "reflect"

	config "github.com/AbsaOSS/tf-provider-registry-generator/internal/config"
	gomock "github.com/golang/mock/gomock"
)

// MockILocation is a mock of ILocation interface.
type MockILocation struct {
	ctrl     *gomock.Controller
	recorder *MockILocationMockRecorder
}

// MockILocationMockRecorder is the mock recorder for MockILocation.
type MockILocationMockRecorder struct {
	mock *MockILocation
}

// NewMockILocation creates a new mock instance.
func NewMockILocation(ctrl *gomock.Controller) *MockILocation {
	mock := &MockILocation{ctrl: ctrl}
	mock.recorder = &MockILocationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILocation) EXPECT() *MockILocationMockRecorder {
	return m.recorder
}

// ArtifactsPath mocks base method.
func (m *MockILocation) ArtifactsPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArtifactsPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// ArtifactsPath indicates an expected call of ArtifactsPath.
func (mr *MockILocationMockRecorder) ArtifactsPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArtifactsPath", reflect.TypeOf((*MockILocation)(nil).ArtifactsPath))
}

// DownloadsPath mocks base method.
func (m *MockILocation) DownloadsPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadsPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// DownloadsPath indicates an expected call of DownloadsPath.
func (mr *MockILocationMockRecorder) DownloadsPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadsPath", reflect.TypeOf((*MockILocation)(nil).DownloadsPath))
}

// GetArtifacts mocks base method.
func (m *MockILocation) GetArtifacts() []Artifact {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifacts")
	ret0, _ := ret[0].([]Artifact)
	return ret0
}

// GetArtifacts indicates an expected call of GetArtifacts.
func (mr *MockILocationMockRecorder) GetArtifacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifacts", reflect.TypeOf((*MockILocation)(nil).GetArtifacts))
}

// GetConfig mocks base method.
func (m *MockILocation) GetConfig() config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(config.Config)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockILocationMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockILocation)(nil).GetConfig))
}

// GetShaSumFile mocks base method.
func (m *MockILocation) GetShaSumFile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShaSumFile")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetShaSumFile indicates an expected call of GetShaSumFile.
func (mr *MockILocationMockRecorder) GetShaSumFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShaSumFile", reflect.TypeOf((*MockILocation)(nil).GetShaSumFile))
}

// GetShaSumSignatureFile mocks base method.
func (m *MockILocation) GetShaSumSignatureFile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShaSumSignatureFile")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetShaSumSignatureFile indicates an expected call of GetShaSumSignatureFile.
func (mr *MockILocationMockRecorder) GetShaSumSignatureFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShaSumSignatureFile", reflect.TypeOf((*MockILocation)(nil).GetShaSumSignatureFile))
}

// GetVersion mocks base method.
func (m *MockILocation) GetVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockILocationMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockILocation)(nil).GetVersion))
}

// ProviderRoot mocks base method.
func (m *MockILocation) ProviderRoot() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderRoot")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProviderRoot indicates an expected call of ProviderRoot.
func (mr *MockILocationMockRecorder) ProviderRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderRoot", reflect.TypeOf((*MockILocation)(nil).ProviderRoot))
}

// TargetsPath mocks base method.
func (m *MockILocation) TargetsPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TargetsPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// TargetsPath indicates an expected call of TargetsPath.
func (mr *MockILocationMockRecorder) TargetsPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TargetsPath", reflect.TypeOf((*MockILocation)(nil).TargetsPath))
}

// TerraformJSONPath mocks base method.
func (m *MockILocation) TerraformJSONPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerraformJSONPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// TerraformJSONPath indicates an expected call of TerraformJSONPath.
func (mr *MockILocationMockRecorder) TerraformJSONPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerraformJSONPath", reflect.TypeOf((*MockILocation)(nil).TerraformJSONPath))
}

// VersionsPath mocks base method.
func (m *MockILocation) VersionsPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VersionsPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// VersionsPath indicates an expected call of VersionsPath.
func (mr *MockILocationMockRecorder) VersionsPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VersionsPath", reflect.TypeOf((*MockILocation)(nil).VersionsPath))
}
